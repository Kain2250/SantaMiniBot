import logging

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.database.methods.create import create_user
from bot.database.methods.get import load_user, user_is_present
from bot.database.models.user_state import UserStateGroup
from bot.keyboards.reply import get_wait_keyboard


async def start_message(msg: Message, state: FSMContext):
    logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - start_message if")

    if await user_is_present(user_id=msg.from_user.id):
        await load_user(user_id=msg.from_user.id, state=state)
        await msg.answer(text="–û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏",
                         reply_markup=get_wait_keyboard().as_markup(resize_keyboard=True))
        await state.set_state(UserStateGroup.wait_state)
        logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - start_message if")
    else:
        await create_user(msg=msg, state=state)
        await msg.answer(text="–ú—ã —Ç—É—Ç —Ä–µ—à–∏–ª–∏, —á—Ç–æ –ª—É—á—à–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≥–æ–¥–∞ –±—É–¥—É—Ç –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –¥—Ä—É–∑–µ–π ü•∞\n"
                              "–ù–æ –¥—Ä—É–∑–µ–π —É –Ω–∞—Å, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∞–∂ –±–æ–ª—å—à–µ 2—Ö —á–µ–ª–æ–≤–µ–∫, –Ω–∞ –≤—Å–µ—Ö –¥–µ–Ω–µ–≥, "
                              "–∫–æ—Ä–æ—á–µ, –Ω–µ –Ω–∞–ø–∞—Å–µ—à—å—Å—è. "
                              "–¢–∞–∫ —á—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É.",
                         reply=False)
        await msg.answer(
            text="–ö–∞–∂–¥–∞—è –ø–æ—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ–≥–æ –∞–¥—Ä–µ—Å–∞—Ç–∞. –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ <b>–§–ò–û</b>, "
                 "—á—Ç–æ–±—ã —Ç–≤–æ–π –°–∞–Ω—Ç–∞ –∑–Ω–∞–ª –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        await state.set_state(UserStateGroup.input_name_state)
        logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - start_message else")


def register_other_handlers(dp: Dispatcher) -> None:
    dp.message.register(start_message, Command(commands="start"))
