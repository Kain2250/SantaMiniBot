import logging

from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.database.methods.update import update_user
from bot.database.models.user_state import UserStateGroup
from bot.keyboards.reply import get_wait_keyboard


async def input_name_message(msg: Message, state: FSMContext):
    await state.update_data(dict([('user_name', msg.text), ('is_input_name', 1)]))

    await msg.answer(text="–¢–µ–ø–µ—Ä—å —Ç–≤–æ–µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å "
                          "(—á—Ç–æ–±—ã –ø—Ä–∏–µ—Ö–∞—Ç—å –∏ \"–Ω–∞—Å—Ä–∞—Ç—å\" –ø–æ–¥ –¥–≤–µ—Ä—å, —Ö–∞-—Ö–∞, —à—É—Ç–∫–∞!).\n"
                          "–£ –ª—é–±–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–¥—Ä–µ—Å –∏ –∏–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–π –ø–æ—á—Ç—ã, —Ç–∞–∫ —á—Ç–æ –ø–∏—à–∏ –∏ –Ω–µ –±–æ–π—Å—èüòâ\n"
                          "<u>–ù–∞–ø—Ä–∏–º–µ—Ä:</u>\n"
                          "–ü–µ—á–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, —Ç–æ—Å–∫–ª–∏–≤—ã–π —Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥ –≥—Ä—É—Å—Ç—å, –ø—Ä–æ—Å–ø–µ–∫—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–º 13")
    await state.set_state(UserStateGroup.input_address_state)
    logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - input_name_message")


async def input_address_message(msg: Message, state: FSMContext):
    await state.update_data(dict([('address', msg.text), ('is_input_address', 1)]))
    await msg.answer(text="–¢–∞–∫, —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–∏, –¥–∞–ª–µ–µ —É –Ω–∞—Å –±—É–¥—É—Ç —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è "
                          "(–Ω—É –Ω–µ –Ω–∞–≥–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–π—Ñ–æ–Ω —Ç–µ–±–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–¥–∞—Ä—è—Ç, –≤—ã–±–∏—Ä–∞–π –±—é–¥–∂–µ—Ç –¥–æ 3000—Ä)\n"
                          "–ù—É –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã —Å –í–ë, –∂–∏–∑–Ω—å —É–ø—Ä–æ—Å—Ç–∏—à—å –∏ –ø–æ–ª—É—á–∏—à—å, —á—Ç–æ —Ö–æ—á–µ—à—åüëç\n"
                          "<u>–ù–∞–ø—Ä–∏–º–µ—Ä:</u>\n"
                          "\t-–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Å–æ–∫, —á—Ç–æ–±—ã –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º\n"
                          "\t-–ù–µ —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –∞–≤–∞–¥–∞–∫–µ–¥–∞–≤—Ä—É")

    await state.set_state(UserStateGroup.input_wish_state)
    logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - input_address_message")


async def input_wish_message(msg: Message, state: FSMContext):
    await state.update_data(dict([('wish', msg.text), ('is_input_wish', 1)]))
    await state.set_state(UserStateGroup.wait_state)
    await update_user(user_id=msg.from_user.id, state=state)
    await msg.answer(text="–í—Å–µ, –¥–∞–≤–∞–π, –∫–æ—Ä–æ—á–µ –∂–¥–∏ –ø–æ–¥–∞—Ä–æ—á–µ–∫ –æ—Ç —Ç–≤–æ–µ–≥–æ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã. "
                          "–ê –º—ã –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å —Ö–æ—Ç–∏–º —Ç–µ–±–µ –ø–æ–∂–µ–ª–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, "
                          "—É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–µ—Ä–≤–æ–≤ –∏ –±–æ–ª—å—à–æ–≥–æ —Å—á–∞—Å—Ç—å—è!\n"
                          "P.S.–ú—ã –≤—Å–µ–≥–¥–∞ –∂–¥—ë–º —Ç–µ–±—è –≤ –≥–æ—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–¥—ã. –° –ª—é–±–æ–≤—å—é, —Ç–≤–æ–∏ –ü–∞–∂–∏—Ç–Ω–æ–≤—ã‚ù§",
                     reply_markup=get_wait_keyboard())
    logging.info(f"–¢–µ–∫—É—â–∏–π state = {await state.get_state()} –§—É–Ω–∫—Ü–∏—è - input_wish_message")


def register_input_user_data_handlers(dp: Dispatcher):
    dp.message.register(input_name_message, UserStateGroup.input_name_state)
    dp.message.register(input_address_message, UserStateGroup.input_address_state)
    dp.message.register(input_wish_message, UserStateGroup.input_wish_state)
